name: 🤖 Skynet DevSecOps Pipeline

on:
  push:
    branches: [main, master, feature/*]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write
  actions: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Build and Environment Setup
  build-and-prepare:
    name: 🏗️ Build and Prepare
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.branch-info.outputs.branch }}
      has-dockerfile: ${{ steps.check-files.outputs.has-dockerfile }}
      has-k8s-files: ${{ steps.check-files.outputs.has-k8s-files }}
      k8s-directory: ${{ steps.check-files.outputs.k8s-directory }}
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      build-status: ${{ steps.build-status.outputs.status }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Generate Build Info
        id: branch-info
        run: |
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "### 🔄 Pipeline Triggered" > build-report.md
          echo "- **Repository:** ${{ github.repository }}" >> build-report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> build-report.md
          echo "- **Commit:** ${{ github.sha }}" >> build-report.md
          echo "- **Triggered by:** ${{ github.event_name }}" >> build-report.md
          echo "- **Actor:** ${{ github.actor }}" >> build-report.md
          echo "- **Workflow:** ${{ github.workflow }}" >> build-report.md

      - name: 🔍 Detect Project Structure
        id: check-files
        run: |
          # Check for Dockerfile
          DOCKERFILES=$(find . -name "Dockerfile" -o -name "*.dockerfile" 2>/dev/null | head -5)
          if [ -n "$DOCKERFILES" ]; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
            echo "✅ Docker support detected" >> build-report.md
            echo "Found Dockerfiles:" >> build-report.md
            echo "$DOCKERFILES" | sed 's/^/  - /' >> build-report.md
          else
            echo "has-dockerfile=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No Dockerfile found" >> build-report.md
          fi

          # Check for Kubernetes files
          K8S_FILES=$(find . -name "*.yaml" -o -name "*.yml" | grep -E "(deployment|service|configmap|secret|ingress|pod|namespace|statefulset|daemonset)" | head -10 || true)
          HELM_CHARTS=$(find . -name "Chart.yaml" | head -5 || true)
          KUSTOMIZE=$(find . -name "kustomization.yaml" -o -name "kustomization.yml" | head -5 || true)

          if [ -n "$K8S_FILES" ] || [ -n "$HELM_CHARTS" ] || [ -n "$KUSTOMIZE" ]; then
            echo "has-k8s-files=true" >> $GITHUB_OUTPUT
            echo "k8s-directory=." >> $GITHUB_OUTPUT
            echo "✅ Kubernetes manifests detected" >> build-report.md
            if [ -n "$HELM_CHARTS" ]; then
              echo "  - Helm charts found" >> build-report.md
            fi
            if [ -n "$KUSTOMIZE" ]; then
              echo "  - Kustomize configuration found" >> build-report.md
            fi
          else
            echo "has-k8s-files=false" >> $GITHUB_OUTPUT
            echo "k8s-directory=k8s-demo" >> $GITHUB_OUTPUT
            echo "ℹ️ No Kubernetes files found - generating demo" >> build-report.md

            # Create demo K8s files for scanning
            mkdir -p k8s-demo
            cat > k8s-demo/deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: demo-app
            namespace: default
            labels:
              app: demo
              version: "1.0"
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: demo
            template:
              metadata:
                labels:
                  app: demo
                  version: "1.0"
              spec:
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 1000
                  fsGroup: 1000
                containers:
                - name: demo
                  image: nginx:1.25-alpine
                  ports:
                  - containerPort: 8080
                    name: http
                  securityContext:
                    allowPrivilegeEscalation: false
                    readOnlyRootFilesystem: true
                    runAsNonRoot: true
                    runAsUser: 1000
                    capabilities:
                      drop:
                        - ALL
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
                    limits:
                      memory: "128Mi"
                      cpu: "100m"
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 8080
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 8080
                    initialDelaySeconds: 5
                    periodSeconds: 5
          EOF

            cat > k8s-demo/service.yaml << 'EOF'
          apiVersion: v1
          kind: Service
          metadata:
            name: demo-service
            namespace: default
            labels:
              app: demo
          spec:
            selector:
              app: demo
            ports:
            - port: 80
              targetPort: 8080
              protocol: TCP
              name: http
            type: ClusterIP
          EOF
          fi

      - name: 🐳 Set up Docker Buildx
        if: steps.check-files.outputs.has-dockerfile == 'true'
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        if: steps.check-files.outputs.has-dockerfile == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        if: steps.check-files.outputs.has-dockerfile == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build Docker image
        if: steps.check-files.outputs.has-dockerfile == 'true'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: 📦 Upload Docker image artifact
        if: steps.check-files.outputs.has-dockerfile == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

      - name: ✅ Build Summary
        id: build-status
        run: |
          echo "### ⚙️ Build Results" >> build-report.md
          echo "✅ Repository scanned successfully" >> build-report.md
          if [ "${{ steps.check-files.outputs.has-dockerfile }}" == "true" ]; then
            echo "✅ Docker image built successfully" >> build-report.md
            echo "status=success-with-docker" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No Docker image to build" >> build-report.md
            echo "status=success-no-docker" >> $GITHUB_OUTPUT
          fi
          echo "✅ Environment prepared for security scanning" >> build-report.md

      - name: 📤 Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md

  # Stage 2: Comprehensive Security Analysis (Streamlined)
  security-analysis:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-prepare
    strategy:
      fail-fast: false
      matrix:
        scan-type:
          - { name: "trivy-fs", type: "filesystem" }
          - { name: "trivy-image", type: "image", condition: "dockerfile" }
          - { name: "sast", type: "sast" }
          - { name: "k8s", type: "kubernetes" }
          - { name: "code-quality", type: "linting" }
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      # Conditional steps based on scan type
      - name: 📦 Download Docker image
        if: matrix.scan-type.name == 'trivy-image' && needs.build-and-prepare.outputs.has-dockerfile == 'true'
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: 🐳 Load Docker image
        if: matrix.scan-type.name == 'trivy-image' && needs.build-and-prepare.outputs.has-dockerfile == 'true'
        run: |
          docker load --input /tmp/image.tar
          docker image ls -a

      # Trivy Filesystem Scan
      - name: 🔍 Run Trivy Filesystem Scan
        if: matrix.scan-type.name == 'trivy-fs'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          exit-code: '0'

      - name: 🔍 Run Trivy Filesystem SARIF
        if: matrix.scan-type.name == 'trivy-fs'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'

      # Trivy Image Scan
      - name: 🔍 Run Trivy Image Scan
        if: matrix.scan-type.name == 'trivy-image' && needs.build-and-prepare.outputs.has-dockerfile == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: ${{ format('{0}/{1}:latest', env.REGISTRY, env.IMAGE_NAME) }}
          format: 'json'
          output: 'trivy-image-results.json'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          exit-code: '0'

      - name: 🔍 Run Trivy Image SARIF
        if: matrix.scan-type.name == 'trivy-image' && needs.build-and-prepare.outputs.has-dockerfile == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: ${{ format('{0}/{1}:latest', env.REGISTRY, env.IMAGE_NAME) }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'

      # SAST Scan
      - name: 🛠️ Install Trunk for SAST
        if: matrix.scan-type.name == 'sast'
        run: |
          curl -fsSL https://get.trunk.io | bash -s -- -y
          echo "$HOME/.cache/trunk/tools/trunk" >> $GITHUB_PATH

      - name: 🔍 Run SAST Scan
        if: matrix.scan-type.name == 'sast'
        run: |
          trunk check --ci --output=json > sast-results.json 2>/dev/null || echo "SAST scan completed"
          trunk check --ci --output=text > sast-results.txt 2>/dev/null || echo "SAST scan completed"

      # Kubernetes Security Scan
      - name: 🔧 Setup Kubernetes Scan
        if: matrix.scan-type.name == 'k8s'
        run: mkdir -p results

      - name: 🔍 Run Kubernetes Security Scan
        if: matrix.scan-type.name == 'k8s'
        uses: stackrox/kube-linter-action@v1.0.4
        with:
          directory: ${{ needs.build-and-prepare.outputs.k8s-directory }}
          format: json
          output-file: results/kube-linter.json
          config: |
            checks:
              addAllBuiltIn: true
              exclude:
                - "no-extensions-v1beta"
        continue-on-error: true

      - name: 🔍 Run Kubernetes SARIF Scan
        if: matrix.scan-type.name == 'k8s'
        uses: stackrox/kube-linter-action@v1.0.4
        with:
          directory: ${{ needs.build-and-prepare.outputs.k8s-directory }}
          format: sarif
          output-file: results/kube-linter.sarif
        continue-on-error: true

      # Code Quality/Linting
      - name: 🔧 Set up Node.js for Linting
        if: matrix.scan-type.name == 'code-quality'
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 🔧 Install and configure ESLint
        if: matrix.scan-type.name == 'code-quality'
        run: |
          npm init -y
          npm install --save-dev eslint @eslint/js
          cat > eslint.config.js << 'EOF'
          import js from '@eslint/js';
          export default [
            js.configs.recommended,
            {
              files: ['**/*.js', '**/*.mjs'],
              rules: {
                "no-unused-vars": "warn",
                "no-console": "warn"
              }
            }
          ];
          EOF
          npm pkg set scripts.lint="eslint . --format json"

      - name: 🔍 Run Code Quality Scan
        if: matrix.scan-type.name == 'code-quality'
        run: |
          npm run lint > linting-results.json 2>/dev/null || echo "Linting completed"
          npx eslint . --format unix > linting-results.txt 2>/dev/null || echo "Linting completed"

      # Generate unified security reports
      - name: 📊 Generate Security Report
        run: |
          SCAN_NAME="${{ matrix.scan-type.name }}"
          echo "## 🛡️ ${SCAN_NAME^} Security Analysis Results" > ${SCAN_NAME}-report.md
          echo "" >> ${SCAN_NAME}-report.md

          case "$SCAN_NAME" in
            "trivy-fs"|"trivy-image")
              SCAN_TYPE="${{ matrix.scan-type.type }}"
              if [ -f "trivy-${SCAN_TYPE}-results.json" ]; then
                CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-${SCAN_TYPE}-results.json 2>/dev/null || echo "0")
                HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-${SCAN_TYPE}-results.json 2>/dev/null || echo "0")
                MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-${SCAN_TYPE}-results.json 2>/dev/null || echo "0")
                LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-${SCAN_TYPE}-results.json 2>/dev/null || echo "0")

                echo "### 📊 Vulnerability Summary" >> ${SCAN_NAME}-report.md
                echo "| Severity | Count | Status |" >> ${SCAN_NAME}-report.md
                echo "|----------|-------|--------|" >> ${SCAN_NAME}-report.md
                echo "| 🔴 Critical | $CRITICAL | $([ $CRITICAL -gt 0 ] && echo '⚠️' || echo '✅') |" >> ${SCAN_NAME}-report.md
                echo "| 🟠 High | $HIGH | $([ $HIGH -gt 0 ] && echo '⚠️' || echo '✅') |" >> ${SCAN_NAME}-report.md
                echo "| 🟡 Medium | $MEDIUM | $([ $MEDIUM -gt 0 ] && echo '⚠️' || echo '✅') |" >> ${SCAN_NAME}-report.md
                echo "| 🔵 Low | $LOW | $([ $LOW -gt 0 ] && echo 'ℹ️' || echo '✅') |" >> ${SCAN_NAME}-report.md

                # Set failure thresholds
                if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 10 ]; then
                  echo "" >> ${SCAN_NAME}-report.md
                  echo "🚨 **Security threshold exceeded!** Critical: $CRITICAL, High: $HIGH" >> ${SCAN_NAME}-report.md
                  echo "scan-result=failed" >> $GITHUB_ENV
                else
                  echo "scan-result=passed" >> $GITHUB_ENV
                fi

                # Add critical vulnerabilities details
                if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
                  echo "" >> ${SCAN_NAME}-report.md
                  echo "### 🚨 Critical/High Vulnerabilities" >> ${SCAN_NAME}-report.md
                  jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | "- **\(.VulnerabilityID)** (\(.Severity)): \(.Title // "No title")\n  - Package: `\(.PkgName)` \(.InstalledVersion)\n  - Fixed in: \(.FixedVersion // "Not available")"' trivy-${SCAN_TYPE}-results.json 2>/dev/null | head -10 >> ${SCAN_NAME}-report.md || echo "Could not parse vulnerability details" >> ${SCAN_NAME}-report.md
                fi
              else
                echo "❌ Scan results not available" >> ${SCAN_NAME}-report.md
                echo "scan-result=error" >> $GITHUB_ENV
              fi
              ;;
            "sast")
              if [ -f "sast-results.json" ]; then
                ISSUES=$(jq 'length' sast-results.json 2>/dev/null || echo "0")
                echo "### 📊 SAST Summary" >> ${SCAN_NAME}-report.md
                echo "- **Total Issues:** $ISSUES" >> ${SCAN_NAME}-report.md
                if [ "$ISSUES" -gt 0 ]; then
                  echo "" >> ${SCAN_NAME}-report.md
                  echo "### 🔍 Found Issues" >> ${SCAN_NAME}-report.md
                  echo '```' >> ${SCAN_NAME}-report.md
                  cat sast-results.txt 2>/dev/null | head -20 >> ${SCAN_NAME}-report.md || echo "Could not display issues"
                  echo '```' >> ${SCAN_NAME}-report.md
                fi
                echo "scan-result=passed" >> $GITHUB_ENV
              else
                echo "❌ SAST results not available" >> ${SCAN_NAME}-report.md
                echo "scan-result=error" >> $GITHUB_ENV
              fi
              ;;
            "k8s")
              if [ -f "results/kube-linter.json" ]; then
                TOTAL_ISSUES=$(jq '.Reports | length' results/kube-linter.json 2>/dev/null || echo "0")
                echo "### 📊 Kubernetes Security Summary" >> ${SCAN_NAME}-report.md
                echo "- **Total Issues:** $TOTAL_ISSUES" >> ${SCAN_NAME}-report.md
                if [ "$TOTAL_ISSUES" -gt 0 ]; then
                  echo "" >> ${SCAN_NAME}-report.md
                  echo "### 🚨 Security Issues" >> ${SCAN_NAME}-report.md
                  jq -r '.Reports[] | "- **\(.Check)** in `\(.Object.K8sObject.Name)`\n  - \(.Diagnostic.Message)"' results/kube-linter.json 2>/dev/null >> ${SCAN_NAME}-report.md || echo "Could not parse issues"
                else
                  echo "✅ **No security issues found!**" >> ${SCAN_NAME}-report.md
                fi
                echo "scan-result=passed" >> $GITHUB_ENV
              else
                echo "❌ Kubernetes scan results not available" >> ${SCAN_NAME}-report.md
                echo "scan-result=error" >> $GITHUB_ENV
              fi
              ;;
            "code-quality")
              if [ -f "linting-results.json" ]; then
                ERRORS=$(jq '[.[] | select(.severity == 2)] | length' linting-results.json 2>/dev/null || echo "0")
                WARNINGS=$(jq '[.[] | select(.severity == 1)] | length' linting-results.json 2>/dev/null || echo "0")
                echo "### 📊 Code Quality Summary" >> ${SCAN_NAME}-report.md
                echo "- **Errors:** $ERRORS" >> ${SCAN_NAME}-report.md
                echo "- **Warnings:** $WARNINGS" >> ${SCAN_NAME}-report.md
                if [ "$ERRORS" -gt 0 ] || [ "$WARNINGS" -gt 0 ]; then
                  echo "" >> ${SCAN_NAME}-report.md
                  echo "### 📝 Code Issues" >> ${SCAN_NAME}-report.md
                  echo '```' >> ${SCAN_NAME}-report.md
                  cat linting-results.txt 2>/dev/null | head -15 >> ${SCAN_NAME}-report.md || echo "Could not display issues"
                  echo '```' >> ${SCAN_NAME}-report.md
                fi
                echo "scan-result=passed" >> $GITHUB_ENV
              else
                echo "❌ Code quality results not available" >> ${SCAN_NAME}-report.md
                echo "scan-result=error" >> $GITHUB_ENV
              fi
              ;;
          esac

      # Upload SARIF files to GitHub Security
      - name: 📤 Upload SARIF to GitHub Security
        if: |
          always() && (
            (matrix.scan-type.name == 'trivy-fs' && hashFiles('trivy-fs-results.sarif') != '') ||
            (matrix.scan-type.name == 'trivy-image' && needs.build-and-prepare.outputs.has-dockerfile == 'true' && hashFiles('trivy-image-results.sarif') != '') ||
            (matrix.scan-type.name == 'k8s' && hashFiles('results/kube-linter.sarif') != '')
          )
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            ${{ matrix.scan-type.name == 'trivy-fs' && 'trivy-fs-results.sarif' || '' }}
            ${{ matrix.scan-type.name == 'trivy-image' && needs.build-and-prepare.outputs.has-dockerfile == 'true' && 'trivy-image-results.sarif' || '' }}
            ${{ matrix.scan-type.name == 'k8s' && 'results/kube-linter.sarif' || '' }}
          category: '${{ matrix.scan-type.name }}'

      # Upload all scan artifacts
      - name: 📦 Upload Security Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: security-${{ matrix.scan-type.name }}-results
          path: |
            ${{ matrix.scan-type.name }}-report.md
            trivy-*-results.*
            sast-results.*
            results/
            linting-results.*

  # Stage 3: Security Gate and Results Consolidation
  security-gate:
    name: 🛡️ Security Gate
    runs-on: ubuntu-latest
    needs: [build-and-prepare, security-analysis]
    if: always()
    outputs:
      gate-status: ${{ steps.gate-check.outputs.status }}
      overall-result: ${{ steps.gate-check.outputs.result }}
    steps:
      - name: 📦 Download all security reports
        uses: actions/download-artifact@v4

      - name: 📊 Evaluate security results
        id: gate-check
        run: |
          echo "## 🛡️ Security Gate Analysis" > security-gate.md
          echo "" >> security-gate.md

          # Matrix result evaluation
          TRIVY_FS_RESULT="${{ needs.security-analysis.result }}"
          TRIVY_IMG_RESULT="${{ needs.security-analysis.result }}"
          SAST_RESULT="${{ needs.security-analysis.result }}"
          K8S_RESULT="${{ needs.security-analysis.result }}"
          CODE_RESULT="${{ needs.security-analysis.result }}"

          echo "### 📊 Scan Results Summary" >> security-gate.md
          echo "| Scan Type | Status | Result |" >> security-gate.md
          echo "|-----------|--------|---------|" >> security-gate.md
          echo "| 🔍 SAST Analysis | ${{ needs.security-analysis.result == 'success' && '✅ Passed' || needs.security-analysis.result == 'skipped' && '⏭️ Skipped' || '⚠️ Issues Found' }} | $SAST_RESULT |" >> security-gate.md
          echo "| 📝 Code Quality | ${{ needs.security-analysis.result == 'success' && '✅ Passed' || needs.security-analysis.result == 'skipped' && '⏭️ Skipped' || '⚠️ Issues Found' }} | $CODE_RESULT |" >> security-gate.md
          echo "| 🛡️ Trivy Security | ${{ needs.security-analysis.result == 'success' && '✅ Passed' || needs.security-analysis.result == 'skipped' && '⏭️ Skipped' || '⚠️ Issues Found' }} | $TRIVY_FS_RESULT |" >> security-gate.md
          echo "| ⚙️ Kubernetes | ${{ needs.security-analysis.result == 'success' && '✅ Passed' || needs.security-analysis.result == 'skipped' && '⏭️ Skipped' || '⚠️ Issues Found' }} | $K8S_RESULT |" >> security-gate.md

          # Check for critical failures
          CRITICAL_FAILURES=0
          if [[ "${{ needs.security-analysis.result }}" == "failure" ]]; then
            ((CRITICAL_FAILURES++))
          fi

          echo "" >> security-gate.md
          if [ $CRITICAL_FAILURES -gt 0 ]; then
            echo "🚨 **SECURITY GATE: FAILED** - $CRITICAL_FAILURES critical scan(s) failed" >> security-gate.md
            echo "❌ Deployment blocked due to security issues" >> security-gate.md
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "result=failure" >> $GITHUB_OUTPUT
          else
            echo "✅ **SECURITY GATE: PASSED** - All scans completed successfully" >> security-gate.md
            echo "🚀 Ready for deployment" >> security-gate.md
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "result=success" >> $GITHUB_OUTPUT
          fi

      - name: 📤 Upload security gate report
        uses: actions/upload-artifact@v4
        with:
          name: security-gate-report
          path: security-gate.md

  # Stage 4: Consolidated PR Comments and Deploy
  pr-summary:
    name: 📋 PR Summary & Reporting
    runs-on: ubuntu-latest
    needs: [build-and-prepare, security-analysis, security-gate]
    if: github.event_name == 'pull_request' && always()
    steps:
      - name: 📦 Download all reports
        uses: actions/download-artifact@v4

      - name: 📊 Generate Consolidated PR Comment
        run: |
          echo "# 🤖 Skynet DevSecOps Pipeline Results" > pr-summary.md
          echo "" >> pr-summary.md

          # Build information
          if [ -f build-report/build-report.md ]; then
            cat build-report/build-report.md >> pr-summary.md
            echo "" >> pr-summary.md
          fi

          # Security gate results
          if [ -f security-gate-report/security-gate.md ]; then
            cat security-gate-report/security-gate.md >> pr-summary.md
            echo "" >> pr-summary.md
          fi

          # Individual scan results in collapsible sections
          echo "## 🔍 Detailed Security Analysis" >> pr-summary.md
          echo "" >> pr-summary.md

          # SAST Results
          if [ -f security-sast-results/sast-report.md ]; then
            echo "<details>" >> pr-summary.md
            echo "<summary>🔍 SAST Security Analysis</summary>" >> pr-summary.md
            echo "" >> pr-summary.md
            cat security-sast-results/sast-report.md >> pr-summary.md
            echo "</details>" >> pr-summary.md
            echo "" >> pr-summary.md
          fi

          # Code Quality Results
          if [ -f security-code-quality-results/code-quality-report.md ]; then
            echo "<details>" >> pr-summary.md
            echo "<summary>📝 Code Quality Analysis</summary>" >> pr-summary.md
            echo "" >> pr-summary.md
            cat security-code-quality-results/code-quality-report.md >> pr-summary.md
            echo "</details>" >> pr-summary.md
            echo "" >> pr-summary.md
          fi

          # Trivy Filesystem Results
          if [ -f security-trivy-fs-results/trivy-fs-report.md ]; then
            echo "<details>" >> pr-summary.md
            echo "<summary>🛡️ Trivy Filesystem Security Scan</summary>" >> pr-summary.md
            echo "" >> pr-summary.md
            cat security-trivy-fs-results/trivy-fs-report.md >> pr-summary.md
            echo "</details>" >> pr-summary.md
            echo "" >> pr-summary.md
          fi

          # Trivy Image Results
          if [ -f security-trivy-image-results/trivy-image-report.md ]; then
            echo "<details>" >> pr-summary.md
            echo "<summary>🐳 Trivy Container Image Security Scan</summary>" >> pr-summary.md
            echo "" >> pr-summary.md
            cat security-trivy-image-results/trivy-image-report.md >> pr-summary.md
            echo "</details>" >> pr-summary.md
            echo "" >> pr-summary.md
          fi

          # Kubernetes Results
          if [ -f security-k8s-results/k8s-report.md ]; then
            echo "<details>" >> pr-summary.md
            echo "<summary>⚙️ Kubernetes Security Analysis</summary>" >> pr-summary.md
            echo "" >> pr-summary.md
            cat security-k8s-results/k8s-report.md >> pr-summary.md
            echo "</details>" >> pr-summary.md
            echo "" >> pr-summary.md
          fi

          # Footer
          echo "---" >> pr-summary.md
          echo "*🤖 Automated by Skynet DevSecOps Pipeline | Generated on $(date)*" >> pr-summary.md
          echo "*✨ Enhanced security scanning with unified reporting*" >> pr-summary.md

      - name: 💬 Post Consolidated PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "🤖 Skynet DevSecOps Pipeline"
          path: pr-summary.md

  # Stage 5: Deploy (conditional on security gate)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build-and-prepare, security-gate]
    if: github.ref == 'refs/heads/main' && needs.security-gate.outputs.gate-status == 'passed'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy Application
        run: |
          echo "🚀 Deploying to production environment..."
          echo "✅ Security gate passed - deployment authorized"
          echo "🏗️ Build status: ${{ needs.build-and-prepare.outputs.build-status }}"
          echo "🛡️ Security status: ${{ needs.security-gate.outputs.gate-status }}"
          echo "✅ Deployment completed successfully"

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Results" > deployment-report.md
          echo "" >> deployment-report.md
          echo "✅ **Deployment Status:** Success" >> deployment-report.md
          echo "🌍 **Environment:** Production" >> deployment-report.md
          echo "📅 **Deployed at:** $(date)" >> deployment-report.md
          echo "🔗 **Repository:** ${{ github.repository }}" >> deployment-report.md
          echo "🌿 **Branch:** ${{ github.ref_name }}" >> deployment-report.md
          echo "📝 **Commit:** ${{ github.sha }}" >> deployment-report.md

      - name: 📤 Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
