name: 🤖 Skynet DevSecOps Pipeline

on:
  push:
    branches: [main, master, feature/*]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write
  actions: read

jobs:
  # Stage 1: Quick Build and Basic Checks
  build-and-validate:
    name: 🏗️ Build and Validate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      has-dockerfile: ${{ steps.check-files.outputs.has-dockerfile }}
      has-k8s-files: ${{ steps.check-files.outputs.has-k8s-files }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Project Structure
        id: check-files
        timeout-minutes: 2
        run: |
          echo "### 🔄 Pipeline Triggered" > build-report.md
          echo "- **Repository:** ${{ github.repository }}" >> build-report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> build-report.md
          echo "- **Commit:** ${{ github.sha }}" >> build-report.md
          echo "- **Triggered by:** ${{ github.event_name }}" >> build-report.md
          echo "- **Actor:** ${{ github.actor }}" >> build-report.md

          # Quick check for Dockerfile
          if find . -maxdepth 3 -name "Dockerfile" -o -name "*.dockerfile" | grep -q .; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
            echo "✅ Docker support detected" >> build-report.md
          else
            echo "has-dockerfile=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No Dockerfile found" >> build-report.md
          fi

          # Quick check for Kubernetes files
          if find . -maxdepth 5 -name "*.yaml" -o -name "*.yml" | grep -E "(deployment|service|configmap|ingress)" | grep -q .; then
            echo "has-k8s-files=true" >> $GITHUB_OUTPUT
            echo "✅ Kubernetes manifests detected" >> build-report.md
          else
            echo "has-k8s-files=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No Kubernetes files found" >> build-report.md
          fi

      - name: 📤 Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md
          retention-days: 1

  # Stage 2: Essential Security Checks (Parallel)
  code-quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-and-validate
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📝 YAML Validation
        timeout-minutes: 3
        run: |
          echo "## 📝 Code Quality Results" > quality-report.md
          echo "" >> quality-report.md

          # Quick YAML validation
          echo "### YAML Files Validation" >> quality-report.md
          YAML_FILES=$(find . -name "*.yml" -o -name "*.yaml" | head -20)
          if [ -n "$YAML_FILES" ]; then
            echo "Checking YAML files..." >> quality-report.md
            echo '```' >> quality-report.md
            echo "$YAML_FILES" | while read file; do
              if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                echo "✅ $file" >> quality-report.md
              else
                echo "❌ $file" >> quality-report.md
              fi
            done
            echo '```' >> quality-report.md
          else
            echo "No YAML files found" >> quality-report.md
          fi

      - name: 📤 Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

  filesystem-security:
    name: 🛡️ Filesystem Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-and-validate
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          timeout: 5m

      - name: 📊 Generate security report
        timeout-minutes: 2
        run: |
          echo "## 🛡️ Filesystem Security Scan" > fs-security-report.md
          echo "" >> fs-security-report.md

          if [ -f "trivy-fs-results.json" ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-fs-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-fs-results.json 2>/dev/null || echo "0")

            echo "### 📊 Vulnerability Summary" >> fs-security-report.md
            echo "- 🔴 Critical: $CRITICAL" >> fs-security-report.md
            echo "- 🟠 High: $HIGH" >> fs-security-report.md

            if [ $CRITICAL -eq 0 ] && [ $HIGH -lt 10 ]; then
              echo "✅ **Security check passed**" >> fs-security-report.md
            else
              echo "⚠️ **Security review needed**" >> fs-security-report.md
            fi
          else
            echo "⚠️ Scan results not available" >> fs-security-report.md
          fi

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: fs-security-report
          path: |
            fs-security-report.md
            trivy-fs-results.json

  kubernetes-security:
    name: ⚙️ Kubernetes Security
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: build-and-validate
    if: needs.build-and-validate.outputs.has-k8s-files == 'true'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Scan with kube-linter
        uses: stackrox/kube-linter-action@v1.0.4
        id: kube-linter
        with:
          directory: .
          format: json
          output-file: kube-linter-results.json
        continue-on-error: true

      - name: 📊 Generate Kubernetes report
        timeout-minutes: 2
        run: |
          echo "## ⚙️ Kubernetes Security Scan" > k8s-security-report.md
          echo "" >> k8s-security-report.md

          if [ -f kube-linter-results.json ]; then
            ISSUES=$(jq '.Reports | length' kube-linter-results.json 2>/dev/null || echo "0")
            echo "- **Total Issues:** $ISSUES" >> k8s-security-report.md

            if [ $ISSUES -eq 0 ]; then
              echo "✅ **No security issues found**" >> k8s-security-report.md
            else
              echo "⚠️ **$ISSUES security issues found**" >> k8s-security-report.md
            fi
          else
            echo "⚠️ Scan results not available" >> k8s-security-report.md
          fi

      - name: 📤 Upload Kubernetes report
        uses: actions/upload-artifact@v4
        with:
          name: k8s-security-report
          path: |
            k8s-security-report.md
            kube-linter-results.json

  # Stage 3: Consolidate Results
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-and-validate, code-quality, filesystem-security, kubernetes-security]
    if: always()
    steps:
      - name: 📦 Download all reports
        uses: actions/download-artifact@v4

      - name: 📊 Generate consolidated summary
        timeout-minutes: 2
        run: |
          echo "# 🤖 Skynet DevSecOps Pipeline Results" > security-summary.md
          echo "" >> security-summary.md

          # Add build info if available
          if [ -f build-report/build-report.md ]; then
            cat build-report/build-report.md >> security-summary.md
            echo "" >> security-summary.md
          fi

          # Security gate status
          echo "## 🛡️ Security Gate Results" >> security-summary.md
          echo "| Scan Type | Status |" >> security-summary.md
          echo "|-----------|--------|" >> security-summary.md
          echo "| 📝 Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
          echo "| 🛡️ Filesystem Security | ${{ needs.filesystem-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
          echo "| ⚙️ Kubernetes Security | ${{ needs.kubernetes-security.result == 'success' && '✅ Passed' || needs.kubernetes-security.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> security-summary.md

          # Overall status
          FAILED_JOBS=0
          if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
          fi
          if [[ "${{ needs.filesystem-security.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
          fi
          if [[ "${{ needs.kubernetes-security.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
          fi

          echo "" >> security-summary.md
          if [ $FAILED_JOBS -eq 0 ]; then
            echo "✅ **SECURITY GATE: PASSED** - All security checks completed successfully" >> security-summary.md
            echo "🚀 Ready for deployment" >> security-summary.md
          else
            echo "⚠️ **SECURITY GATE: REVIEW NEEDED** - $FAILED_JOBS check(s) need attention" >> security-summary.md
            echo "📋 Please review the detailed reports below" >> security-summary.md
          fi

          # Add detailed reports in collapsible sections
          echo "" >> security-summary.md
          echo "## 📋 Detailed Reports" >> security-summary.md

          if [ -f quality-report/quality-report.md ]; then
            echo "<details>" >> security-summary.md
            echo "<summary>📝 Code Quality Results</summary>" >> security-summary.md
            echo "" >> security-summary.md
            cat quality-report/quality-report.md >> security-summary.md
            echo "" >> security-summary.md
            echo "</details>" >> security-summary.md
            echo "" >> security-summary.md
          fi

          if [ -f fs-security-report/fs-security-report.md ]; then
            echo "<details>" >> security-summary.md
            echo "<summary>🛡️ Filesystem Security Results</summary>" >> security-summary.md
            echo "" >> security-summary.md
            cat fs-security-report/fs-security-report.md >> security-summary.md
            echo "" >> security-summary.md
            echo "</details>" >> security-summary.md
            echo "" >> security-summary.md
          fi

          if [ -f k8s-security-report/k8s-security-report.md ]; then
            echo "<details>" >> security-summary.md
            echo "<summary>⚙️ Kubernetes Security Results</summary>" >> security-summary.md
            echo "" >> security-summary.md
            cat k8s-security-report/k8s-security-report.md >> security-summary.md
            echo "" >> security-summary.md
            echo "</details>" >> security-summary.md
          fi

          echo "" >> security-summary.md
          echo "---" >> security-summary.md
          echo "*🤖 Automated by Skynet DevSecOps Pipeline*" >> security-summary.md

      - name: 📤 Upload consolidated summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

  # Stage 4: PR Comment (only on PRs)
  pr-comment:
    name: 💬 PR Summary
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: security-summary
    if: github.event_name == 'pull_request' && always()
    steps:
      - name: 📦 Download security summary
        uses: actions/download-artifact@v4
        with:
          name: security-summary

      - name: 💬 Post PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "🤖 Skynet DevSecOps Pipeline"
          path: security-summary.md
