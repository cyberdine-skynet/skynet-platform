name: 🤖 Skynet DevSecOps Pipeline

on:
  push:
    branches: [main, master, feature/*]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write
  actions: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Quick Build and Basic Checks
  build-and-validate:
    name: 🏗️ Build and Validate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      has-dockerfile: ${{ steps.check-files.outputs.has-dockerfile }}
      has-k8s-files: ${{ steps.check-files.outputs.has-k8s-files }}
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Project Structure
        id: check-files
        timeout-minutes: 2
        run: |
          echo "### Pipeline Execution Report" > build-report.md
          echo "" >> build-report.md
          echo "**Repository:** ${{ github.repository }}" >> build-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> build-report.md
          echo "**Commit:** ${{ github.sha }}" >> build-report.md
          echo "**Triggered by:** ${{ github.event_name }}" >> build-report.md
          echo "**Actor:** ${{ github.actor }}" >> build-report.md
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> build-report.md
          echo "" >> build-report.md

          # Quick check for Dockerfile
          if find . -maxdepth 3 -name "Dockerfile" -o -name "*.dockerfile" | grep -q .; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
            echo "**Docker Support:** Detected" >> build-report.md
            find . -maxdepth 3 -name "Dockerfile" -o -name "*.dockerfile" | head -3 | sed 's/^/- /' >> build-report.md
          else
            echo "has-dockerfile=false" >> $GITHUB_OUTPUT
            echo "**Docker Support:** No Dockerfile found" >> build-report.md
          fi
          echo "" >> build-report.md

          # Quick check for Kubernetes files
          if find . -maxdepth 5 -name "*.yaml" -o -name "*.yml" | grep -E "(deployment|service|configmap|ingress)" | grep -q .; then
            echo "has-k8s-files=true" >> $GITHUB_OUTPUT
            echo "**Kubernetes Manifests:** Detected" >> build-report.md
            find . -maxdepth 5 -name "*.yaml" -o -name "*.yml" | grep -E "(deployment|service|configmap|ingress)" | head -5 | sed 's/^/- /' >> build-report.md
          else
            echo "has-k8s-files=false" >> $GITHUB_OUTPUT
            echo "**Kubernetes Manifests:** None found" >> build-report.md
          fi

      - name: 🐳 Set up Docker Buildx
        if: steps.check-files.outputs.has-dockerfile == 'true'
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        if: steps.check-files.outputs.has-dockerfile == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        if: steps.check-files.outputs.has-dockerfile == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        if: steps.check-files.outputs.has-dockerfile == 'true'
        id: build
        timeout-minutes: 10
        run: |
          echo "# Docker Image Build Report" > docker-build-report.md
          echo "" >> docker-build-report.md

          # Find Dockerfiles with proper validation
          DOCKERFILES=$(find . -name "Dockerfile" -o -name "*.dockerfile" | grep -v ".git" | head -5)

          if [ -n "$DOCKERFILES" ]; then
            echo "**Registry:** \`${{ env.REGISTRY }}\`" >> docker-build-report.md
            echo "**Repository:** \`${{ env.IMAGE_NAME }}\`" >> docker-build-report.md
            echo "**Build Trigger:** ${{ github.event_name }}" >> docker-build-report.md
            echo "" >> docker-build-report.md

            # Log in to registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            BUILD_SUCCESS=true
            echo "## Build Results" >> docker-build-report.md
            echo "" >> docker-build-report.md
            echo "| Service | Status | Context | Registry Tag |" >> docker-build-report.md
            echo "|---------|--------|---------|--------------|" >> docker-build-report.md

            for dockerfile in $DOCKERFILES; do
              # Get directory and service name
              BUILD_CONTEXT=$(dirname "$dockerfile")
              SERVICE_NAME=$(basename "$BUILD_CONTEXT")

              # Validate build context has necessary files
              if [ ! -f "$dockerfile" ]; then
                echo "| $SERVICE_NAME | ERROR | Missing Dockerfile | - |" >> docker-build-report.md
                BUILD_SUCCESS=false
                continue
              fi

              # Construct image tags
              IMAGE_BASE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${SERVICE_NAME}"
              IMAGE_TAG_LATEST="${IMAGE_BASE}:latest"
              IMAGE_TAG_SHA="${IMAGE_BASE}:${{ github.sha }}"

              echo "Building $SERVICE_NAME from context: $BUILD_CONTEXT"

              # Build image with proper error handling
              if docker build -t "$IMAGE_TAG_LATEST" -t "$IMAGE_TAG_SHA" -f "$dockerfile" "$BUILD_CONTEXT"; then
                echo "Build successful for $SERVICE_NAME"

                # Push images
                if docker push "$IMAGE_TAG_LATEST" && docker push "$IMAGE_TAG_SHA"; then
                  echo "| $SERVICE_NAME | SUCCESS | \`$BUILD_CONTEXT\` | \`$IMAGE_TAG_LATEST\` |" >> docker-build-report.md
                  echo "Push successful for $SERVICE_NAME"
                else
                  echo "| $SERVICE_NAME | PUSH_FAILED | \`$BUILD_CONTEXT\` | Build OK, push failed |" >> docker-build-report.md
                  echo "Push failed for $SERVICE_NAME"
                  BUILD_SUCCESS=false
                fi
              else
                echo "| $SERVICE_NAME | BUILD_FAILED | \`$BUILD_CONTEXT\` | Build failed |" >> docker-build-report.md
                echo "Build failed for $SERVICE_NAME"
                BUILD_SUCCESS=false
              fi
            done

            echo "" >> docker-build-report.md
            if [ "$BUILD_SUCCESS" = true ]; then
              echo "**Overall Status:** All images built and pushed successfully" >> docker-build-report.md
              echo "" >> docker-build-report.md
              echo "**Next Steps:**" >> docker-build-report.md
              echo "- Images are available in the container registry" >> docker-build-report.md
              echo "- Argo CD will detect and deploy new images automatically" >> docker-build-report.md
              echo "- Monitor deployment progress in Argo CD dashboard" >> docker-build-report.md
            else
              echo "**Overall Status:** Some builds failed - review logs above" >> docker-build-report.md
              echo "" >> docker-build-report.md
              echo "**Troubleshooting:**" >> docker-build-report.md
              echo "1. Check Dockerfile syntax and dependencies" >> docker-build-report.md
              echo "2. Verify build context contains all required files" >> docker-build-report.md
              echo "3. Test builds locally: \`docker build -t test .\`" >> docker-build-report.md
              echo "4. Check registry permissions and authentication" >> docker-build-report.md
              exit 1
            fi
          else
            echo "**Status:** No Dockerfiles found in repository" >> docker-build-report.md
            echo "" >> docker-build-report.md
            echo "Searched for files matching: \`Dockerfile\` or \`*.dockerfile\`" >> docker-build-report.md
          fi

      - name: Update build report with image info
        if: steps.check-files.outputs.has-dockerfile == 'true'
        run: |
          if [ -f docker-build-report.md ]; then
            echo "" >> build-report.md
            cat docker-build-report.md >> build-report.md
          fi

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md
          retention-days: 1

  # Stage 2: Essential Security Checks (Parallel)
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-and-validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate YAML files
        timeout-minutes: 3
        run: |
          echo "# Code Quality Analysis Report" > quality-report.md
          echo "" >> quality-report.md
          echo "## YAML File Validation" >> quality-report.md
          echo "" >> quality-report.md

          # Find and validate YAML files
          YAML_FILES=$(find . -name "*.yml" -o -name "*.yaml" | grep -v ".git" | head -50)

          if [ -n "$YAML_FILES" ]; then
            VALID_COUNT=0
            INVALID_COUNT=0
            TOTAL_COUNT=0

            echo "| File | Status | Issue |" >> quality-report.md
            echo "|------|--------|-------|" >> quality-report.md

            echo "$YAML_FILES" | while read file; do
              ((TOTAL_COUNT++))

              # Check YAML syntax
              if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                echo "| \`$file\` | VALID | None |" >> quality-report.md
                ((VALID_COUNT++))
              else
                ERROR_MSG=$(python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>&1 | head -1 | cut -c1-80)
                echo "| \`$file\` | INVALID | $ERROR_MSG |" >> quality-report.md
                ((INVALID_COUNT++))
              fi
            done

            echo "" >> quality-report.md
            echo "**Summary:** $VALID_COUNT valid, $INVALID_COUNT invalid YAML files" >> quality-report.md

            if [ $INVALID_COUNT -gt 0 ]; then
              echo "" >> quality-report.md
              echo "### Recommended Actions" >> quality-report.md
              echo "" >> quality-report.md
              echo "Fix YAML syntax errors before proceeding:" >> quality-report.md
              echo "" >> quality-report.md
              echo '```bash' >> quality-report.md
              echo "# Run automatic YAML fixer" >> quality-report.md
              echo "./scripts/proactive-fix.sh" >> quality-report.md
              echo "" >> quality-report.md
              echo "# Or manually validate and fix" >> quality-report.md
              echo "yamllint --config .yamllint.yml ." >> quality-report.md
              echo '```' >> quality-report.md

              # Set failure exit code for invalid YAML
              exit 1
            fi
          else
            echo "No YAML files found for validation." >> quality-report.md
          fi

      - name: Upload quality analysis
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

  filesystem-security:
    name: Filesystem Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-and-validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          timeout: 5m

      - name: Generate security analysis report
        timeout-minutes: 2
        run: |
          echo "# Filesystem Security Analysis" > fs-security-report.md
          echo "" >> fs-security-report.md

          if [ -f "trivy-fs-results.json" ]; then
            # Extract vulnerability counts
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-fs-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-fs-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-fs-results.json 2>/dev/null || echo "0")

            echo "## Vulnerability Summary" >> fs-security-report.md
            echo "" >> fs-security-report.md
            echo "| Severity | Count | Status |" >> fs-security-report.md
            echo "|----------|-------|--------|" >> fs-security-report.md
            echo "| Critical | $CRITICAL | $([ $CRITICAL -eq 0 ] && echo 'PASS' || echo 'FAIL') |" >> fs-security-report.md
            echo "| High | $HIGH | $([ $HIGH -eq 0 ] && echo 'PASS' || echo 'REVIEW') |" >> fs-security-report.md
            echo "| Medium | $MEDIUM | INFO |" >> fs-security-report.md

            # Determine overall status
            if [ $CRITICAL -eq 0 ] && [ $HIGH -lt 10 ]; then
              echo "" >> fs-security-report.md
              echo "**Overall Status: ACCEPTABLE**" >> fs-security-report.md
              echo "" >> fs-security-report.md
              echo "No critical vulnerabilities found. High severity count is within acceptable limits." >> fs-security-report.md
            elif [ $CRITICAL -gt 0 ]; then
              echo "" >> fs-security-report.md
              echo "**Overall Status: CRITICAL - IMMEDIATE ACTION REQUIRED**" >> fs-security-report.md
              echo "" >> fs-security-report.md
              echo "Critical vulnerabilities detected that must be addressed before deployment." >> fs-security-report.md
            else
              echo "" >> fs-security-report.md
              echo "**Overall Status: REVIEW REQUIRED**" >> fs-security-report.md
              echo "" >> fs-security-report.md
              echo "High severity vulnerabilities found that should be reviewed and addressed." >> fs-security-report.md
            fi

            # Add top vulnerabilities if any critical or high found
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "" >> fs-security-report.md
              echo "## Top Security Issues" >> fs-security-report.md
              echo "" >> fs-security-report.md

              # Extract top 5 critical/high vulnerabilities
              jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL" or .Severity=="HIGH") | "- **\(.VulnerabilityID)** (\(.Severity)): \(.Title // "No title") in \(.PkgName // "unknown package")"' trivy-fs-results.json 2>/dev/null | head -5 >> fs-security-report.md

              echo "" >> fs-security-report.md
              echo "## Remediation Steps" >> fs-security-report.md
              echo "" >> fs-security-report.md
              echo "1. **Update Dependencies**: Upgrade affected packages to patched versions" >> fs-security-report.md
              echo "2. **Review Base Images**: Consider using minimal or distroless base images" >> fs-security-report.md
              echo "3. **Security Scanning**: Implement regular vulnerability scanning in CI/CD" >> fs-security-report.md
              echo "4. **Runtime Protection**: Apply additional security controls in production" >> fs-security-report.md
              echo "" >> fs-security-report.md
              echo '```bash' >> fs-security-report.md
              echo "# Run local security scan" >> fs-security-report.md
              echo "trivy fs . --severity CRITICAL,HIGH" >> fs-security-report.md
              echo "" >> fs-security-report.md
              echo "# Update package managers" >> fs-security-report.md
              echo "# npm audit fix    # for Node.js projects" >> fs-security-report.md
              echo "# pip install --upgrade pip  # for Python projects" >> fs-security-report.md
              echo '```' >> fs-security-report.md

              # Set exit code for critical vulnerabilities
              if [ $CRITICAL -gt 0 ]; then
                exit 1
              fi
            fi
          else
            echo "**Status: ERROR**" >> fs-security-report.md
            echo "" >> fs-security-report.md
            echo "Trivy scan results not available. Please check the scan logs." >> fs-security-report.md
          fi

      - name: Upload security analysis
        uses: actions/upload-artifact@v4
        with:
          name: fs-security-report
          path: |
            fs-security-report.md
            trivy-fs-results.json

  kubernetes-security:
    name: Kubernetes Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: build-and-validate
    if: needs.build-and-validate.outputs.has-k8s-files == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Scan with kube-linter
        uses: stackrox/kube-linter-action@v1.0.4
        id: kube-linter
        with:
          directory: .
          format: json
          output-file: kube-linter-results.json
        continue-on-error: true

      - name: Generate Kubernetes security report
        timeout-minutes: 2
        run: |
          echo "# Kubernetes Security Analysis" > k8s-security-report.md
          echo "" >> k8s-security-report.md

          if [ -f kube-linter-results.json ]; then
            TOTAL_ISSUES=$(jq '.Reports | length' kube-linter-results.json 2>/dev/null || echo "0")

            echo "## Security Analysis Summary" >> k8s-security-report.md
            echo "" >> k8s-security-report.md
            echo "**Total Security Issues Found:** $TOTAL_ISSUES" >> k8s-security-report.md
            echo "" >> k8s-security-report.md

            if [ $TOTAL_ISSUES -eq 0 ]; then
              echo "**Status: PASSED**" >> k8s-security-report.md
              echo "" >> k8s-security-report.md
              echo "All Kubernetes manifests passed security validation." >> k8s-security-report.md
            else
              echo "**Status: REVIEW REQUIRED**" >> k8s-security-report.md
              echo "" >> k8s-security-report.md
              echo "Security issues detected in Kubernetes manifests that should be addressed." >> k8s-security-report.md

              echo "" >> k8s-security-report.md
              echo "## Issues by Category" >> k8s-security-report.md
              echo "" >> k8s-security-report.md

              # Group issues by check name
              jq -r '.Reports[] | "- **\(.Check)**: \(.Message) (File: \(.Object.Metadata.Name // "unknown"))"' kube-linter-results.json 2>/dev/null | head -10 >> k8s-security-report.md

              echo "" >> k8s-security-report.md
              echo "## Recommended Security Enhancements" >> k8s-security-report.md
              echo "" >> k8s-security-report.md
              echo "1. **Security Contexts**: Add non-root user settings and read-only filesystems" >> k8s-security-report.md
              echo "2. **Resource Limits**: Define CPU and memory limits for all containers" >> k8s-security-report.md
              echo "3. **Network Policies**: Implement network segmentation controls" >> k8s-security-report.md
              echo "4. **RBAC**: Apply principle of least privilege for service accounts" >> k8s-security-report.md
              echo "5. **Pod Security Standards**: Enable restricted pod security policies" >> k8s-security-report.md
              echo "" >> k8s-security-report.md
              echo "### Example Security Context" >> k8s-security-report.md
              echo '```yaml' >> k8s-security-report.md
              echo "securityContext:" >> k8s-security-report.md
              echo "  runAsNonRoot: true" >> k8s-security-report.md
              echo "  runAsUser: 1000" >> k8s-security-report.md
              echo "  readOnlyRootFilesystem: true" >> k8s-security-report.md
              echo "  allowPrivilegeEscalation: false" >> k8s-security-report.md
              echo "  capabilities:" >> k8s-security-report.md
              echo "    drop:" >> k8s-security-report.md
              echo "    - ALL" >> k8s-security-report.md
              echo '```' >> k8s-security-report.md
              echo "" >> k8s-security-report.md
              echo "### Validation Commands" >> k8s-security-report.md
              echo '```bash' >> k8s-security-report.md
              echo "# Validate manifests locally" >> k8s-security-report.md
              echo "kubectl apply --dry-run=client -f manifests/" >> k8s-security-report.md
              echo "" >> k8s-security-report.md
              echo "# Run kube-linter locally" >> k8s-security-report.md
              echo "kube-linter lint manifests/" >> k8s-security-report.md
              echo '```' >> k8s-security-report.md

              # Set exit code for security issues
              exit 1
            fi
          else
            echo "**Status: ERROR**" >> k8s-security-report.md
            echo "" >> k8s-security-report.md
            echo "Kube-linter results not available. Please check the scan logs." >> k8s-security-report.md
          fi

      - name: Upload Kubernetes analysis
        uses: actions/upload-artifact@v4
        with:
          name: k8s-security-report
          path: |
            k8s-security-report.md
            kube-linter-results.json
            kube-linter-results.json

  image-security:
    name: 🔍 Image Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-and-validate
    if: needs.build-and-validate.outputs.has-dockerfile == 'true'
    steps:
      - name: 🔍 Run Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ needs.build-and-validate.outputs.image-tag }}'
          format: 'json'
          output: 'trivy-image-results.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          timeout: 5m

      - name: 📊 Generate image security report
        timeout-minutes: 2
        run: |
          echo "## 🔍 Container Image Security Scan" > image-security-report.md
          echo "" >> image-security-report.md
          echo "**Scanned Image:** \`${{ needs.build-and-validate.outputs.image-tag }}\`" >> image-security-report.md
          echo "" >> image-security-report.md

          if [ -f "trivy-image-results.json" ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-image-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-image-results.json 2>/dev/null || echo "0")

            echo "### 📊 Vulnerability Summary" >> image-security-report.md
            echo "- 🔴 Critical: $CRITICAL" >> image-security-report.md
            echo "- 🟠 High: $HIGH" >> image-security-report.md

            if [ $CRITICAL -eq 0 ] && [ $HIGH -lt 10 ]; then
              echo "✅ **Image security check passed**" >> image-security-report.md
              echo "🚀 **Image is safe for deployment**" >> image-security-report.md
            else
              echo "⚠️ **Image security review needed**" >> image-security-report.md
              echo "🛡️ **Consider updating base image or dependencies**" >> image-security-report.md
            fi
          else
            echo "⚠️ Image scan results not available" >> image-security-report.md
          fi

      - name: 📤 Upload image security report
        uses: actions/upload-artifact@v4
        with:
          name: image-security-report
          path: |
            image-security-report.md
            trivy-image-results.json

  # Stage 3: Consolidate Results
  security-summary:
    name: Security Analysis Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-and-validate, code-quality, filesystem-security, image-security, kubernetes-security]
    if: always()
    steps:
      - name: Download analysis reports
        uses: actions/download-artifact@v4

      - name: Generate enterprise report
        timeout-minutes: 2
        run: |
          # Calculate overall status
          FAILED_JOBS=0
          SECURITY_ISSUES=0
          CRITICAL_ISSUES=0

          # Job status tracking
          if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
          fi
          if [[ "${{ needs.filesystem-security.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
            ((SECURITY_ISSUES++))
          fi
          if [[ "${{ needs.image-security.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
            ((SECURITY_ISSUES++))
          fi
          if [[ "${{ needs.kubernetes-security.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
            ((SECURITY_ISSUES++))
          fi

          # Extract vulnerability counts from reports
          if [ -f fs-security-report/trivy-fs-results.json ]; then
            CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' fs-security-report/trivy-fs-results.json 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' fs-security-report/trivy-fs-results.json 2>/dev/null || echo "0")
            if [ $CRITICAL_COUNT -gt 0 ]; then
              ((CRITICAL_ISSUES++))
            fi
          fi

          # Generate professional report header
          cat > security-summary.md << 'EOL'
          # Code Quality & Security Analysis Report

          ## Summary

          This automated analysis was performed on the pull request to identify potential security vulnerabilities, code quality issues, and deployment readiness.

          EOL

          # Add build information
          if [ -f build-report/build-report.md ]; then
            echo "### Build Information" >> security-summary.md
            echo "" >> security-summary.md
            echo "| Property | Value |" >> security-summary.md
            echo "|----------|-------|" >> security-summary.md
            echo "| Repository | \`${{ github.repository }}\` |" >> security-summary.md
            echo "| Branch | \`${{ github.ref_name }}\` |" >> security-summary.md
            echo "| Commit | \`${{ github.sha }}\` |" >> security-summary.md
            echo "| Trigger | ${{ github.event_name }} |" >> security-summary.md
            echo "| Actor | @${{ github.actor }} |" >> security-summary.md
            echo "" >> security-summary.md
          fi

          # Overall gate status
          echo "### Security Gate Status" >> security-summary.md
          echo "" >> security-summary.md
          if [ $FAILED_JOBS -eq 0 ] && [ $CRITICAL_ISSUES -eq 0 ]; then
            echo "**Status: PASSED** ✓" >> security-summary.md
            echo "" >> security-summary.md
            echo "All security and quality checks have passed. This pull request is approved for merge." >> security-summary.md
          elif [ $CRITICAL_ISSUES -gt 0 ]; then
            echo "**Status: BLOCKED** ✗" >> security-summary.md
            echo "" >> security-summary.md
            echo "Critical security vulnerabilities detected. This pull request cannot be merged until issues are resolved." >> security-summary.md
          else
            echo "**Status: REVIEW REQUIRED** ⚠" >> security-summary.md
            echo "" >> security-summary.md
            echo "Quality or security issues detected that require review before merge." >> security-summary.md
          fi

          # Analysis results table
          echo "" >> security-summary.md
          echo "### Analysis Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "| Check | Status | Issues | Action Required |" >> security-summary.md
          echo "|-------|--------|--------|-----------------|" >> security-summary.md

          # Code Quality
          if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "| Code Quality | PASS | 0 | None |" >> security-summary.md
          else
            echo "| Code Quality | FAIL | Multiple | Fix YAML syntax errors |" >> security-summary.md
          fi

          # Filesystem Security
          if [[ "${{ needs.filesystem-security.result }}" == "success" ]]; then
            echo "| Filesystem Security | PASS | 0 | None |" >> security-summary.md
          elif [[ "${{ needs.filesystem-security.result }}" == "failure" ]]; then
            echo "| Filesystem Security | FAIL | ${CRITICAL_COUNT:-0} critical, ${HIGH_COUNT:-0} high | Address vulnerabilities |" >> security-summary.md
          else
            echo "| Filesystem Security | SKIP | - | No analysis performed |" >> security-summary.md
          fi

          # Image Security
          if [[ "${{ needs.image-security.result }}" == "success" ]]; then
            echo "| Container Security | PASS | 0 | None |" >> security-summary.md
          elif [[ "${{ needs.image-security.result }}" == "failure" ]]; then
            echo "| Container Security | FAIL | Unknown | Review container scan |" >> security-summary.md
          else
            echo "| Container Security | SKIP | - | No containers to scan |" >> security-summary.md
          fi

          # Kubernetes Security
          if [[ "${{ needs.kubernetes-security.result }}" == "success" ]]; then
            echo "| Kubernetes Security | PASS | 0 | None |" >> security-summary.md
          elif [[ "${{ needs.kubernetes-security.result }}" == "failure" ]]; then
            echo "| Kubernetes Security | FAIL | Multiple | Fix manifest issues |" >> security-summary.md
          else
            echo "| Kubernetes Security | SKIP | - | No K8s manifests found |" >> security-summary.md
          fi

          # Add deployment information
          echo "" >> security-summary.md
          echo "### Deployment Information" >> security-summary.md
          echo "" >> security-summary.md
          if [[ "${{ needs.build-and-validate.outputs.has-dockerfile }}" == "true" ]]; then
            if [[ "${{ needs.build-and-validate.result }}" == "success" ]]; then
              echo "**Container Images Built:** Yes" >> security-summary.md
              echo "" >> security-summary.md
              echo "- Registry: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> security-summary.md
              echo "- Tag: Latest commit SHA" >> security-summary.md
              echo "- Status: Ready for deployment via Argo CD" >> security-summary.md
              echo "" >> security-summary.md
              echo "**Next Steps:**" >> security-summary.md
              echo "1. Argo CD will automatically detect the new images" >> security-summary.md
              echo "2. Monitor deployment in the Argo CD dashboard" >> security-summary.md
              echo "3. Verify pod status after deployment completes" >> security-summary.md
            else
              echo "**Container Images Built:** Failed" >> security-summary.md
              echo "" >> security-summary.md
              echo "Container build failed. Review build logs before proceeding." >> security-summary.md
            fi
          else
            echo "**Container Images Built:** Not applicable (configuration-only changes)" >> security-summary.md
          fi

          # Add actionable recommendations based on findings
          if [ $FAILED_JOBS -gt 0 ] || [ $CRITICAL_ISSUES -gt 0 ]; then
            echo "" >> security-summary.md
            echo "### Recommended Actions" >> security-summary.md
            echo "" >> security-summary.md

            if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
              echo "**Fix Code Quality Issues:**" >> security-summary.md
              echo '```bash' >> security-summary.md
              echo "# Run automatic YAML fixes" >> security-summary.md
              echo "./scripts/proactive-fix.sh" >> security-summary.md
              echo "" >> security-summary.md
              echo "# Install pre-commit hooks to prevent future issues" >> security-summary.md
              echo "pre-commit install --config .pre-commit-config-fast.yaml" >> security-summary.md
              echo '```' >> security-summary.md
              echo "" >> security-summary.md
            fi

            if [[ "${{ needs.filesystem-security.result }}" == "failure" ]]; then
              echo "**Address Security Vulnerabilities:**" >> security-summary.md
              echo "1. Review the detailed Trivy report below" >> security-summary.md
              echo "2. Update dependencies to patched versions" >> security-summary.md
              echo "3. Consider using distroless or minimal base images" >> security-summary.md
              echo "4. Run security scans locally before pushing" >> security-summary.md
              echo "" >> security-summary.md
            fi

            if [[ "${{ needs.kubernetes-security.result }}" == "failure" ]]; then
              echo "**Fix Kubernetes Manifest Issues:**" >> security-summary.md
              echo "1. Review kube-linter findings below" >> security-summary.md
              echo "2. Add security contexts and resource limits" >> security-summary.md
              echo "3. Ensure non-root user configurations" >> security-summary.md
              echo "4. Validate manifests with kubectl dry-run" >> security-summary.md
              echo "" >> security-summary.md
            fi
          fi

          # Add detailed reports as collapsible sections
          echo "" >> security-summary.md
          echo "---" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Detailed Analysis Reports" >> security-summary.md

          if [ -f quality-report/quality-report.md ]; then
            echo "" >> security-summary.md
            echo "<details>" >> security-summary.md
            echo "<summary><strong>Code Quality Analysis</strong></summary>" >> security-summary.md
            echo "" >> security-summary.md
            cat quality-report/quality-report.md >> security-summary.md
            echo "" >> security-summary.md
            echo "</details>" >> security-summary.md
          fi

          if [ -f fs-security-report/fs-security-report.md ]; then
            echo "" >> security-summary.md
            echo "<details>" >> security-summary.md
            echo "<summary><strong>Filesystem Security Scan</strong></summary>" >> security-summary.md
            echo "" >> security-summary.md
            cat fs-security-report/fs-security-report.md >> security-summary.md
            echo "" >> security-summary.md
            echo "</details>" >> security-summary.md
          fi

          if [ -f image-security-report/image-security-report.md ]; then
            echo "" >> security-summary.md
            echo "<details>" >> security-summary.md
            echo "<summary><strong>Container Image Security Scan</strong></summary>" >> security-summary.md
            echo "" >> security-summary.md
            cat image-security-report/image-security-report.md >> security-summary.md
            echo "" >> security-summary.md
            echo "</details>" >> security-summary.md
          fi

          if [ -f k8s-security-report/k8s-security-report.md ]; then
            echo "" >> security-summary.md
            echo "<details>" >> security-summary.md
            echo "<summary><strong>Kubernetes Security Analysis</strong></summary>" >> security-summary.md
            echo "" >> security-summary.md
            cat k8s-security-report/k8s-security-report.md >> security-summary.md
            echo "" >> security-summary.md
            echo "</details>" >> security-summary.md
          fi

          if [ -f mkdocs-report/mkdocs-report.md ]; then
            echo "" >> security-summary.md
            echo "<details>" >> security-summary.md
            echo "<summary><strong>Documentation Deployment</strong></summary>" >> security-summary.md
            echo "" >> security-summary.md
            cat mkdocs-report/mkdocs-report.md >> security-summary.md
            echo "" >> security-summary.md
            echo "</details>" >> security-summary.md
          fi

          echo "" >> security-summary.md
          echo "---" >> security-summary.md
          echo "*Automated analysis performed by Skynet DevSecOps Pipeline*" >> security-summary.md

      - name: Upload enterprise report
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

  # Stage 4: PR Comment (only on PRs)
  pr-comment:
    name: PR Analysis Report
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: security-summary
    if: github.event_name == 'pull_request' && always()
    steps:
      - name: Download analysis report
        uses: actions/download-artifact@v4
        with:
          name: security-summary

      - name: Post analysis comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "Skynet DevSecOps Analysis"
          path: security-summary.md

  # Stage 5: Smart MkDocs Deployment (conditional)
  mkdocs-deploy:
    name: Documentation Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-and-validate]
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'workflow_dispatch' ||
       contains(github.event.head_commit.message, '[docs]') ||
       contains(github.event.head_commit.message, '[mkdocs]') ||
       github.event_name == 'schedule')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect documentation changes
        id: docs-changes
        run: |
          echo "Analyzing documentation changes..."

          # Check if this is a forced deployment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "docs-changed=true" >> $GITHUB_OUTPUT
            echo "Manual deployment requested via workflow_dispatch"
            exit 0
          fi

          # Check if commit message indicates docs update
          if [[ "${{ github.event.head_commit.message }}" == *"[docs]"* ]] || [[ "${{ github.event.head_commit.message }}" == *"[mkdocs]"* ]]; then
            echo "docs-changed=true" >> $GITHUB_OUTPUT
            echo "Documentation update detected in commit message"
            exit 0
          fi

          # Check for file changes in documentation directories
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          if echo "$CHANGED_FILES" | grep -E "(docs/|manifests/mkdocs-docs/|mkdocs\.yml|\.md$)" >/dev/null; then
            echo "docs-changed=true" >> $GITHUB_OUTPUT
            echo "Documentation files changed:"
            echo "$CHANGED_FILES" | grep -E "(docs/|manifests/mkdocs-docs/|mkdocs\.yml|\.md$)" | head -5
          else
            echo "docs-changed=false" >> $GITHUB_OUTPUT
            echo "No documentation changes detected"
          fi

      - name: Build MkDocs container image
        if: steps.docs-changes.outputs.docs-changed == 'true'
        timeout-minutes: 5
        run: |
          echo "Building MkDocs documentation container..."
          cd manifests/mkdocs-docs

          # Build the documentation site with proper error handling
          if docker build -t mkdocs-site:${{ github.sha }} .; then
            echo "MkDocs container built successfully"
          else
            echo "MkDocs container build failed"
            exit 1
          fi

          # Test the build by running a quick validation
          if docker run --rm mkdocs-site:${{ github.sha }} test -d /docs/site; then
            echo "MkDocs site validation successful"
          else
            echo "MkDocs site validation failed"
            exit 1
          fi

      - name: Push MkDocs image to registry
        if: steps.docs-changes.outputs.docs-changed == 'true'
        timeout-minutes: 3
        run: |
          echo "Pushing MkDocs image to container registry..."

          # Log in to container registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # Tag the image
          MKDOCS_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mkdocs"
          docker tag mkdocs-site:${{ github.sha }} ${MKDOCS_IMAGE}:${{ github.sha }}
          docker tag mkdocs-site:${{ github.sha }} ${MKDOCS_IMAGE}:latest

          # Push the images
          if docker push ${MKDOCS_IMAGE}:${{ github.sha }} && docker push ${MKDOCS_IMAGE}:latest; then
            echo "MkDocs image pushed successfully: ${MKDOCS_IMAGE}:${{ github.sha }}"
          else
            echo "Failed to push MkDocs image"
            exit 1
          fi

      - name: Generate deployment report
        if: always()
        timeout-minutes: 1
        run: |
          echo "# Documentation Deployment Report" > mkdocs-report.md
          echo "" >> mkdocs-report.md

          if [[ "${{ steps.docs-changes.outputs.docs-changed }}" == "true" ]]; then
            if [[ "${{ job.status }}" == "success" ]]; then
              echo "**Status:** DEPLOYED" >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "Documentation has been successfully built and deployed." >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "## Deployment Details" >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "| Property | Value |" >> mkdocs-report.md
              echo "|----------|-------|" >> mkdocs-report.md
              echo "| Image | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mkdocs:${{ github.sha }}\` |" >> mkdocs-report.md
              echo "| Registry | \`${{ env.REGISTRY }}\` |" >> mkdocs-report.md
              echo "| Trigger | ${{ github.event_name }} |" >> mkdocs-report.md
              echo "| URL | [docu.fle.api64.de](https://docu.fle.api64.de) |" >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "## Next Steps" >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "1. **Argo CD Sync**: Automatic detection of new image in 1-3 minutes" >> mkdocs-report.md
              echo "2. **Pod Rollout**: New documentation pods will be deployed" >> mkdocs-report.md
              echo "3. **Service Update**: Traffic will be routed to updated documentation" >> mkdocs-report.md
              echo "4. **Verification**: Check the live site for updated content" >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "## Verification Commands" >> mkdocs-report.md
              echo '```bash' >> mkdocs-report.md
              echo "# Check Argo CD application status" >> mkdocs-report.md
              echo "kubectl get application mkdocs-docs -n argocd" >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "# Check deployment status" >> mkdocs-report.md
              echo "kubectl get deployment mkdocs-docs -n mkdocs-docs" >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "# Check pod status" >> mkdocs-report.md
              echo "kubectl get pods -n mkdocs-docs -l app=mkdocs-docs" >> mkdocs-report.md
              echo '```' >> mkdocs-report.md
            else
              echo "**Status:** FAILED" >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "Documentation deployment failed. Review the build logs for details." >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "## Troubleshooting" >> mkdocs-report.md
              echo "" >> mkdocs-report.md
              echo "1. **Verify MkDocs Configuration**: Check \`manifests/mkdocs-docs/mkdocs.yml\`" >> mkdocs-report.md
              echo "2. **Test Build Locally**: Run \`mkdocs build\` in the docs directory" >> mkdocs-report.md
              echo "3. **Check Dependencies**: Ensure all required Python packages are listed" >> mkdocs-report.md
              echo "4. **Validate Dockerfile**: Test Docker build process locally" >> mkdocs-report.md
            fi
          else
            echo "**Status:** SKIPPED" >> mkdocs-report.md
            echo "" >> mkdocs-report.md
            echo "Documentation deployment was skipped because no relevant changes were detected." >> mkdocs-report.md
            echo "" >> mkdocs-report.md
            echo "## Triggering Manual Deployment" >> mkdocs-report.md
            echo "" >> mkdocs-report.md
            echo "To force a documentation deployment:" >> mkdocs-report.md
            echo "" >> mkdocs-report.md
            echo "1. **Via Commit Message**: Include \`[docs]\` or \`[mkdocs]\` in your commit message" >> mkdocs-report.md
            echo "2. **Via Workflow Dispatch**: Manually trigger the workflow in GitHub Actions" >> mkdocs-report.md
            echo "3. **Via File Changes**: Modify files in \`docs/\` or \`manifests/mkdocs-docs/\`" >> mkdocs-report.md
          fi

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: mkdocs-report
          path: mkdocs-report.md
